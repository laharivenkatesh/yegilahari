 #include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int keys[3];
    struct Node *children[4];
    int numKeys;
    int isLeaf;
} Node;

Node* createNode(int isLeaf) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->isLeaf = isLeaf;
    newNode->numKeys = 0;
    for (int i = 0; i < 4; i++) {
        newNode->children[i] = NULL;
    }
    return newNode;
}

void insertNonFull(Node* node, int key);
void splitChild(Node* parent, int index, Node* child);

void insert(Node** root, int key) {
    Node* r = *root;
    if (r->numKeys == 3) {
        Node* s = createNode(0);
        *root = s;
        s->children[0] = r;
        splitChild(s, 0, r);
        insertNonFull(s, key);
    } else {
        insertNonFull(r, key);
    }
}

void insertNonFull(Node* node, int key) {
    int i = node->numKeys - 1;
    if (node->isLeaf) {
        while (i >= 0 && node->keys[i] > key) {
            node->keys[i + 1] = node->keys[i];
            i--;
        }
        node->keys[i + 1] = key;
        node->numKeys++;
    } else {
        while (i >= 0 && node->keys[i] > key) {
            i--;
        }
        i++;
        if (node->children[i]->numKeys == 3) {
            splitChild(node, i, node->children[i]);
            if (node->keys[i] < key) {
                i++;
            }
        }
        insertNonFull(node->children[i], key);
    }
}

void splitChild(Node* parent, int index, Node* child) {
    Node* newChild = createNode(child->isLeaf);
    newChild->numKeys = 1;
    newChild->keys[0] = child->keys[2];

    if (!child->isLeaf) {
        newChild->children[0] = child->children[2];
        newChild->children[1] = child->children[3];
    }
    child->numKeys = 1;

    for (int j = parent->numKeys; j >= index + 1; j--) {
        parent->children[j + 1] = parent->children[j];
    }
    parent->children[index + 1] = newChild;

    for (int j = parent->numKeys - 1; j >= index; j--) {
        parent->keys[j + 1] = parent->keys[j];
    }
    parent->keys[index] = child->keys[1];
    parent->numKeys++;
}

void printTree(Node* node, int depth) {
    if (node != NULL) {
        for (int i = 0; i < node->numKeys; i++) {
            printTree(node->children[i], depth + 1);
            for (int j = 0; j < depth; j++) {
                printf("  ");
            }
            printf("%d\n", node->keys[i]);
        }
        printTree(node->children[node->numKeys], depth + 1);
    }
}
int main() {
    Node* root = createNode(1);
    int keys[] = {10, 20, 5, 6, 12, 30, 7, 17};
    int n = sizeof(keys) / sizeof(keys[0]);

    for (int i = 0; i < n; i++) {
        insert(&root, keys[i]);
    }

    printTree(root, 0);
    return 0;
}
