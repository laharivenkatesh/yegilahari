#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node *left, *right;
} Node;
Node* newNode(int data) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}
Node* insert(Node* root, int data) {
    if (!root) return newNode(data);
    if (data < root->data) root->left = insert(root->left, data);
    else if (data > root->data) root->right = insert(root->right, data);
    return root;
}
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current && current->left != NULL) current = current->left;
    return current;
}
Node* deleteNode(Node* root, int data) {
    if (!root) return root;
    if (data < root->data) root->left = deleteNode(root->left, data);
    else if (data > root->data) root->right = deleteNode(root->right, data);
    else {
        if (!root->left) {
            Node* temp = root->right;
            free(root);
            return temp;
        } else if (!root->right) {
            Node* temp = root->left;
            free(root);
            return temp;
        }
        Node* temp = minValueNode(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}
Node* search(Node* root, int data) {
    if (!root || root->data == data) return root;
    if (data < root->data) return search(root->left, data);
    return search(root->right, data);
}
void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
int main() {
    Node* root = NULL;
    root = insert(root, 50);
    insert(root, 30); insert(root, 20);
    insert(root, 40); insert(root, 70);
    insert(root, 60); insert(root, 80);
    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");
    printf("After deleting 20\n");
    root = deleteNode(root, 20);
    inorder(root);
    printf("\n");
    printf("After deleting 30\n");
    root = deleteNode(root, 30);
    inorder(root);
    printf("\n");
    printf("After deleting 50\n");
    root = deleteNode(root, 50);
    inorder(root);
    printf("\n");
    Node* found = search(root, 60);
    if (found) printf("Node 60 found\n");
    else printf("Node 60 not found\n");
    return 0;
}
