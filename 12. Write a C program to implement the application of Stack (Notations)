#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

// Structure of a stack node
typedef struct StackNode {
    int data;
    struct StackNode* next;
} StackNode;

// Function to create a new stack node
StackNode* newNode(int data) {
    StackNode* node = (StackNode*)malloc(sizeof(StackNode));
    node->data = data;
    node->next = NULL;
    return node;
}

// Function to check if the stack is empty
int isEmpty(StackNode* root) {
    return !root;
}

// Function to push an item onto the stack
void push(StackNode** root, int data) {
    StackNode* node = newNode(data);
    node->next = *root;
    *root = node;
}

// Function to pop an item from the stack
int pop(StackNode** root) {
    if (isEmpty(*root)) {
        return INT_MIN;
    }
    StackNode* temp = *root;
    *root = (*root)->next;
    int popped = temp->data;
    free(temp);
    return popped;
}

// Function to evaluate a postfix expression
int evaluatePostfix(char* exp) {
    StackNode* stack = NULL;
    
    for (int i = 0; exp[i]; ++i) {
        if (isdigit(exp[i])) {
            push(&stack, exp[i] - '0');
        } else {
            int val1 = pop(&stack);
            int val2 = pop(&stack);
            switch (exp[i]) {
                case '+': push(&stack, val2 + val1); break;
                case '-': push(&stack, val2 - val1); break;
                case '*': push(&stack, val2 * val1); break;
                case '/': push(&stack, val2 / val1); break;
            }
        }
    }
    return pop(&stack);
}

// Driver program
int main() {
    char exp[] = "231*+9-";  // Postfix expression: 2 * (3 + 1) - 9
    printf("Postfix expression evaluation: %d\n", evaluatePostfix(exp));
    return 0;
}
